Author: Olivier Tilloy <olivier.tilloy@canonical.com>
Description: Do not use warning flags that require a newer Clang

Index: dev/build/config/compiler/BUILD.gn
===================================================================
--- dev.orig/build/config/compiler/BUILD.gn
+++ dev/build/config/compiler/BUILD.gn
@@ -491,14 +491,6 @@ config("compiler") {
     }
   }
 
-  if (is_clang && !is_nacl && !use_xcode_clang) {
-    if (!is_chromeos && default_toolchain != "//build/toolchain/cros:target") {
-      # TODO(https://crbug.com/1049161): Remove '-DCLANG_SPAWN_CC1=ON' from build.py instead
-      # once this change has marinated a bit.
-      cflags += [ "-fintegrated-cc1" ]
-    }
-  }
-
   # C11/C++11 compiler flags setup.
   # ---------------------------
   if (is_linux || is_android || (is_nacl && is_clang) || current_os == "aix") {
@@ -690,14 +682,6 @@ config("compiler") {
     ldflags += [ "-Wl,--no-rosegment" ]
   }
 
-  # This flag enforces that member pointer base types are complete. It helps
-  # prevent us from running into problems in the Microsoft C++ ABI (see
-  # https://crbug.com/847724).
-  if (is_clang && !is_nacl && target_os != "chromeos" && !use_xcode_clang &&
-      (is_win || use_custom_libcxx)) {
-    cflags += [ "-fcomplete-member-pointers" ]
-  }
-
   # Pass the same C/C++ flags to the objective C/C++ compiler.
   cflags_objc += cflags_c
   cflags_objcc += cflags_cc
@@ -1479,6 +1463,9 @@ config("default_warnings") {
       # which we no longer use. Check if it makes sense to remove
       # this as well. http://crbug.com/316352
       "-Wno-unneeded-internal-declaration",
+
+      # Ignore unrecognized flags
+      "-Wno-unknown-warning-option",
     ]
 
     # use_xcode_clang only refers to the iOS toolchain, host binaries use
